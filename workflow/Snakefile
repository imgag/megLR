#=============================================================================#
#               O N T     A N A L Y S I S     T O O L S                       #
#=============================================================================#

#_____ CONFIGURATION __________________________________________________________#

import csv
import os
import pathlib
from collections import defaultdict
from glob import glob
import pandas as pd
from collections import OrderedDict

include: "rules/helper_scripts.smk"

configfile: srcdir('../config/config_defaults.yml')
load_project_config(config['project_config'])
print_message()

#_____ PARSE SAMPLE FILE _______________________________________________________#

ID_samples = set()
ID_folders = set()
ID_runs = set()
ID_barcode_folders = set()
map_samples_folder = defaultdict(list)
map_samples_barcode = defaultdict(list)
map_runs_folder = defaultdict(list)

# Parse sample and run id connection table
if  os.path.isfile(config['sample_file']):
    with open(config['sample_file']) as f:
        reader=csv.reader(f, delimiter="\t")
        for row in reader:
            if len(row) == 2:
                ID_samples.add(row[0])
                ID_folders.add(row[1])
                map_samples_folder[row[0]].append(row[1])

            # Add barcodes to folder (tuple)
            elif len(row) == 3:
                ID_samples.add(row[0])
                ID_folders.add(row[1])
                ID_barcode_folders.add(row[1])
                map_samples_barcode[row[0]].append((row[1], row[2]))

            else :
                print("Wrong number of columns in row: ", row, len(row))
                pass

# If no FOFN available, check dir for  Folders with "Sample_" Prefix
else:
    ID_samples, = glob_wildcards('Sample_{sample}/')
    ID_samples = [sample for sample in ID_samples if '/' not in sample]
    print("Automatically detected the following samples in project dir: ")
    print(ID_samples)
    if not ID_samples: 
        print("NO samples ... quitting")
        exit(1)

# Create run names from the Folder_IDs. IE only `20211213_1214_2-A7-D7_PAI80186_4d463244_02064` 
# Regex for run name:   "^\d{8}_\d{4}_\w+-\w+-\w+_\D{3}\d{5}_\w{8}_\w{5}$"
# New folder names: "QIGMI017AF_21061LRa001_02013" or "21061LRa001_02013"
# Regex for new run name:   "^(?:Q\w{9}_)?\d{5}\w*_\d{5}$"
for folder in ID_folders:
    run =  os.path.basename(folder)
    run_pattern = re.compile("^(?:Q\w{9}_)?\d{5}\w*_\d{5}$")
    if bool(run_pattern.match(run)):
        ID_runs.add(run)
        map_runs_folder[run].append(folder)
    else:
        print("Run name has incorrect name: ", run)
        print("Forgot adding run suffix?")
        exit(1)

if config['verbose']:
    print("Samples: ", ID_samples)
    print("Folders:", ID_folders)
    print("Runs:", ID_runs)
    print("Barcode Folders: ", ID_barcode_folders)
    print("Map Folder:", map_samples_folder)
    print("Map Barcode:", map_samples_barcode)
    print("Map Runs:", map_runs_folder)

#_____ INCLUDE MODULES ________________________________________________________#

include: "rules/fetch_reads.smk"
include: "rules/mapping.smk"
include: "rules/assembly.smk"
include: "rules/variant_calling.smk"
include: "rules/structural_variant_calling.smk"
include: "rules/cdna_expression.smk"
include: "rules/cdna_stringtie.smk"
include: "rules/cdna_flair.smk"
include: "rules/dual_barcode.smk"
include: "rules/qc.smk"
include: "rules/qc_database.smk"

#_____ REQUIRED OUTPUT FILES _________________________________________________#

out = {
    'mapping' : expand("Sample_{s}/{s}.bam", s=ID_samples),
    'assembly' : expand("Sample_{s}/{s}.asm.{asm}.fasta",
         s=ID_samples, asm=config['assembly']['methods']),
    'variant_calling': expand("Sample_{s}/{s}_var.vcf.gz", s=ID_samples),
    'structural_variant_calling': [
        expand("Sample_{s}/{s}.sv_sniffles.vcf.gz", s=ID_samples),
        expand("Sample_{s}/{s}.sv_cutesv.vcf.gz", s=ID_samples)
    ],
    'cDNA_expression' : expand("Sample_{s}/{s}.counts.tsv", s=ID_samples),
    'de_analysis' : ["de_analysis/dtu_plots.pdf"],
    'cDNA_stringtie' : expand("Sample_{s}/{s}.stringtie.gtf", s=ID_samples) +
        expand("qc/sqanti/{s}_stringtie/{s}_stringtie_classification.txt", s = ID_samples),
    'cDNA_pinfish' : expand("Sample_{s}/pinfish/corrected_transcriptome_polished_collapsed.fasta", s=ID_samples),
    'cDNA_flair': expand("Sample_{s}/{s}.flair.gtf", s=ID_samples) +
        expand("qc/sqanti/{s}_flair/{s}_flair_classification.txt", s = ID_samples),
    'dual_demux': expand("Sample_{s}/{s}_barcode_distribution.pdf", s = ID_samples) + 
        expand("Sample_{s}/coverage_stats.txt", s = ID_samples),
    'qc' : ['qc/multiqc_report.html'],
    'qc_db' : [
        expand(config['run_db_root'] + "/{run}/{run}.pycoQC.html", run = ID_runs),
        expand(config['run_db_root'] + "/{run}/{run}.pycoQC.json", run = ID_runs),
        expand(config['run_db_root'] + "/{run}/{run}.report.pdf", run = ID_runs),
        expand(config['run_db_root'] + "/{run}/{run}.report.md", run = ID_runs),
        expand(config['run_db_root'] + "/{run}/{run}.barcodes.tsv", run = ID_runs),
        expand(config['run_db_root'] + "/{run}/{run}.mux.csv", run = ID_runs),
        config['run_db_root'] + "/ont_runs_multiqc.html"
        ]
}

# Additional output options
if config['vc']['create_benchmark']:
    out['variant_calling'] +=  expand("qc/happy/{s}.summary.csv", s=ID_samples)

out_selected = [out[step] for step in config['steps']]

rule all:
    input:
        [y for x in out_selected for y in x]

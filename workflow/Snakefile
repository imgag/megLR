#=============================================================================#
#               O N T     A N A L Y S I S     T O O L S                       #
#=============================================================================#

#_____ CONFIGURATION __________________________________________________________#

import csv
import os
import pathlib
from collections import defaultdict
from glob import glob

include: "rules/helper_scripts.smk"

configfile: "config/config_defaults.yml"
load_project_config(config['project_config'])
print_message()

#_____ PARSE SAMPLE FILE _______________________________________________________#

ID_runs = set()
ID_samples = set()
map_samples_run = defaultdict(list)

# Parse sample and run id connection table
with open(config['sample_file']) as f:
    reader=csv.reader(f, delimiter="\t")
    for row in reader:
        if len(row) == 2:
            #print(row)
            ID_runs.add(row[0])
            ID_samples.add(row[1])
            map_samples_run[row[1]].append(row[0])

            try:
                os.makedirs('run_data/'+row[0], exist_ok=True)
                os.makedirs('Sample_'+row[1]+'/runs/', exist_ok=True)
                os.symlink('../../run_data/'+row[0],
                    'Sample_'+row[1]+'/runs/'+row[0])
            except Exception as e:
                pass
        else :
            print("Wrong number of columns in row: ", row)

#_____ INCLUDE MODULES ________________________________________________________#

include: "rules/fetch_reads.smk"
include: "rules/mapping.smk"
include: "rules/assembly.smk"
include: "rules/variant_calling.smk"
include: "rules/structural_variant_calling.smk"
include: "rules/cdna_expression.smk"
include: "rules/cdna_stringtie.smk"
include: "rules/cdna_pinfish.smk"
include: "rules/cdna_flair.smk"
include: "rules/qc.smk"

#_____ REQUIRED OUTPUT FILES _________________________________________________#

out = {
    'mapping' : expand("Sample_{s}/{s}.bam", s=ID_samples),
    'assembly' : expand("Sample_{s}/{s}.asm.{asm}.fasta",
         s=ID_samples, asm=config['assembly']['methods']),
    'variant_calling': expand("Sample_{s}/{s}_var.vcf.gz", s=ID_samples),
    'structural_variant_calling': expand("{s}/{s}.sv_sniffles.vcf.gz", s=ID_samples),
    'cDNA_expression' : expand("Sample_{s}/{s}.counts.tsv", s=ID_samples),
    'cDNA_stringtie' : expand("Sample_{s}/{s}.stringtie.gtf", s=ID_samples),
    'cDNA_pinfish' : expand("Sample_{s}/pinfish/corrected_transcriptome_polished_collapsed.fasta", s=ID_samples),
    'cDNA_flair': expand("Sample_{s}/{s}.flair.gtf", s=ID_samples),
    'qc' : ['qc/multiqc_report.html']
}

# Additional output options
if config['vc']['create_benchmark']:
    out['variant_calling'] +=  expand("qc/happy/{s}.summary.csv", s=ID_samples)

out_selected = [out[step] for step in config['steps']]
#print(out_selected)
rule all:
    input:
        [y for x in out_selected for y in x]
